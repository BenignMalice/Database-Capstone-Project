import java.sql.*;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/PoisePMS";
        String user = "otheruser";
        String password = "swordfish";

        try {
        	// Establish database connection
            Connection connection = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to the database");

            Scanner scanner = new Scanner(System.in);
            boolean exit = false;

            while (!exit) {
                System.out.println("Select an option:");
                System.out.println("1. Add new project");
                System.out.println("2. Update project information");
                System.out.println("3. Finalise project");
                System.out.println("4. List incomplete projects");
                System.out.println("5. List overdue projects");
                System.out.println("6. Find project by number or name");
                System.out.println("7. Exit");
                int choice = scanner.nextInt();
                scanner.nextLine(); 

                switch (choice) {
                    case 1:
                        addNewProject(connection, scanner);
                        break;
                    case 2:
                        updateProject(connection, scanner);
                        break;
                    case 3:
                        finaliseProject(connection, scanner);
                        break;
                    case 4:
                        listIncompleteProjects(connection);
                        break;
                    case 5:
                        listOverdueProjects(connection);
                        break;
                    case 6:
                        findProjectByNameOrNumber(connection, scanner);
                        break;
                    case 7:
                        exit = true;
                        System.out.println("Program exited.");
                        break;
                    default:
                        System.out.println("Invalid choice");
                }
            }

            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    


	// Method to add a new project to the database
    public static void addNewProject(Connection connection, Scanner scanner) {
    	System.out.println("Add new project");
    	System.out.println("---------------");
    	// Get project details from user input
    	System.out.println("Enter project number: ");
	    int projectNumber = scanner.nextInt();
	    scanner.nextLine(); 
	    System.out.println("Enter project name: ");
	    String projectName = scanner.nextLine();

	    System.out.println("Enter building type: ");
	    String buildingType = scanner.nextLine();

	    System.out.println("Enter project address: ");
	    String projectAddress = scanner.nextLine();

	    System.out.println("Enter erf number: ");
	    int erfNumber = scanner.nextInt();
	    scanner.nextLine(); 

	    System.out.println("Enter total project fee: ");
	    double totalProjectFee = scanner.nextDouble();
	    scanner.nextLine(); 

	    System.out.println("Enter total paid: ");
	    double totalPaid = scanner.nextDouble();
	    scanner.nextLine(); 

	    System.out.println("Enter project deadline (YYYY-MM-DD): ");
	    String projectDeadline = scanner.nextLine();

	    System.out.println("Enter architect ID: ");
	    int architectID = scanner.nextInt();
	    scanner.nextLine(); 

	    System.out.println("Enter contractor ID: ");
	    int contractorID = scanner.nextInt();
	    scanner.nextLine(); 

	    System.out.println("Enter customer ID: ");
	    int customerID = scanner.nextInt();
	    scanner.nextLine(); 

	    System.out.println("Enter project manager ID: ");
	    int projectManagerID = scanner.nextInt();
	    scanner.nextLine(); 

	    System.out.println("Enter structural engineer ID: ");
	    int structuralEngID = scanner.nextInt();
	    scanner.nextLine(); 

	    try {
	    	// Prepare and execute SQL insert statement
	        PreparedStatement statement = connection.prepareStatement(
	            "INSERT INTO Project (project_number, project_name, building_type, project_address, erf_number, " +
	            "total_projectfee, total_paid, project_deadline, architect_id, contractor_id, " +
	            "customer_id, projectmanager_id, structuraleng_id) " +
	            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
	        );

	        // Set parameters 
	        statement.setInt(1, projectNumber);
	        statement.setString(2, projectName);
	        statement.setString(3, buildingType);
	        statement.setString(4, projectAddress);
	        statement.setInt(5, erfNumber);
	        statement.setDouble(6, totalProjectFee);
	        statement.setDouble(7, totalPaid);
	        statement.setString(8, projectDeadline);
	        statement.setInt(9, architectID);
	        statement.setInt(10, contractorID);
	        statement.setInt(11, customerID);
	        statement.setInt(12, projectManagerID);
	        statement.setInt(13, structuralEngID);

	        int rowsAffected = statement.executeUpdate();

	        if (rowsAffected > 0) {
	        	System.out.println("---------------------------------");
	            System.out.println("New project added to the database.");

	            // Display the added project details
	            System.out.println("");
	            System.out.println("Added Project Details:");
	            System.out.println("----------------------");
	            System.out.println("Project Number: " + projectNumber);
	            System.out.println("Project Name: " + projectName);
	            System.out.println("Building Type: " + buildingType);
	            System.out.println("Project Address: " + projectAddress);
	            System.out.println("ERF Number: " + erfNumber);
	            System.out.println("Total Project Fee: " + totalProjectFee);
	            System.out.println("Total Paid: " + totalPaid);
	            System.out.println("Project Deadline: " + projectDeadline);
	            // Display associated person names using their IDs
	            System.out.println("Architect: " + getPersonName(connection, "Architect", architectID));
	            System.out.println("Contractor: " + getPersonName(connection, "Contractor", contractorID));
	            System.out.println("Customer: " + getPersonName(connection, "Contractor", customerID));
	            System.out.println("Project Manager ID: " + getPersonName(connection, "Contractor", projectManagerID));
	            System.out.println("Structural Engineer ID: " + getPersonName(connection, "Contractor", structuralEngID));
	            System.out.println("----------------------------------------");

	            }
	        
	        else {
	        	System.out.println("Failed to add project.");
	        	System.out.println("");
	        	
	        }
	        System.out.println("New project added to the database.");
	        System.out.println("");
	        
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}
    
    // Method to find a project by project number or name
    private static void findProjectByNameOrNumber(Connection connection, Scanner scanner) {
        System.out.println("Enter project number or name to search: ");
        System.out.println("---------------------------------------");
        String searchTerm = scanner.nextLine();

        try {
            PreparedStatement statement = connection.prepareStatement(
                "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                "FROM Project P " +
                "LEFT JOIN Architect A ON P.architect_id = A.architect_id " +
                "LEFT JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                "LEFT JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                "LEFT JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                "WHERE P.project_number = ? OR P.project_name LIKE ?"
            );
            statement.setString(1, searchTerm);
            statement.setString(2, "%" + searchTerm + "%");

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                System.out.println("");
                System.out.println("Found matching project(s):");
                System.out.println("");
                do {
                    // Display all project details from the result set
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("Erf Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getString("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("----------------------------------");
                } while (resultSet.next());
            } else {
                System.out.println("No matching project found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

     

    private static void listOverdueProjects(Connection connection) {
        try {
            // Prepare SQL query to retrieve overdue projects with associated names
            PreparedStatement statement = connection.prepareStatement(
                "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                "FROM Project P " +
                "JOIN Architect A ON P.architect_id = A.architect_id " +
                "JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                "JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                "JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                "WHERE P.project_deadline < CURDATE()"
            );

            // Execute the query and get the result set
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
            	System.out.println("");
                System.out.println("Overdue projects:");
                System.out.println("-----------------");
                do {
                    // Display all project details from the result set
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("Erf Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getString("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("");
                    System.out.println("-----------------------------");
                    System.out.println("");
                } while (resultSet.next());
            } else {
                System.out.println("No overdue projects found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    private static void listIncompleteProjects(Connection connection) {
    	try {
            PreparedStatement statement = connection.prepareStatement(
                "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                "FROM Project P " +
                "JOIN Architect A ON P.architect_id = A.architect_id " +
                "JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                "JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                "JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                "WHERE P.project_status != 'finalised';"
            );

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                System.out.println("");
                System.out.println("Projects to be completed:");
                System.out.println("-------------------------");
                System.out.println("");

                do {
                    // Display all project details from the result set
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("Erf Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getString("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("");
                    System.out.println("-----------------------------");
                    System.out.println("");

                } while (resultSet.next());
            } else {
                System.out.println("No projects to be completed found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
      

    private static void finaliseProject(Connection connection, Scanner scanner) {
        System.out.println("Enter project number to finalize: ");
        int projectNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        try {
            // Update project status and completion date
            PreparedStatement updateStatement = connection.prepareStatement(
                "UPDATE Project SET project_status = 'finalised', completion_date = CURDATE() WHERE project_number = ?"
            );
            updateStatement.setInt(1, projectNumber);
            int rowsUpdated = updateStatement.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Project finalised successfully.");
                System.out.println("-------------------------------");
                System.out.println("");

                // Fetch and display the finalized project details
                PreparedStatement selectStatement = connection.prepareStatement(
                    "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                    "FROM Project P " +
                    "JOIN Architect A ON P.architect_id = A.architect_id " +
                    "JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                    "JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                    "JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                    "WHERE P.project_number = ?"
                );
                selectStatement.setInt(1, projectNumber);

                ResultSet resultSet = selectStatement.executeQuery();
                if (resultSet.next()) {
                    System.out.println("Finalised Project Details:");
                    System.out.println("--------------------------");
                    System.out.println("");
                    // Print completion date
                    System.out.println("Project Completion Date: " + resultSet.getDate("completion_date"));
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("ERF Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getDate("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("");
                    System.out.println("--------------------------");
                    System.out.println("");
                }
            } else {
                System.out.println("Project not found or could not be finalized.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }  
    
    private static void updateProject(Connection connection, Scanner scanner) {
        System.out.println("Enter project number to update: ");
        int projectNumber = scanner.nextInt();
        scanner.nextLine(); 
        
        try {
            PreparedStatement selectStatement = connection.prepareStatement(
                "SELECT * FROM Project WHERE project_number = ?"
            );
            selectStatement.setInt(1, projectNumber);

            ResultSet resultSet = selectStatement.executeQuery();
            if (resultSet.next()) {
                System.out.println("Current Project Details:");
                System.out.println("Project Number: " + resultSet.getInt("project_number"));
                System.out.println("Project Name: " + resultSet.getString("project_name"));
                System.out.println("Building Type: " + resultSet.getString("building_type"));
                System.out.println("Project Address: " + resultSet.getString("project_address"));
                System.out.println("ERF Number: " + resultSet.getInt("erf_number"));
                System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                System.out.println("Project Deadline: " + resultSet.getDate("project_deadline"));
                
                // Get user input for updated values
                System.out.println("Enter updated project name (or press Enter to keep current): ");
                String updatedName = scanner.nextLine();
                if (!updatedName.isEmpty()) {
                    // Update project name
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET project_name = ? WHERE project_number = ?"
                    );
                    updateStatement.setString(1, updatedName);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated building type (or press Enter to keep current): ");
                String updatedBuildingType = scanner.nextLine();
                if (!updatedBuildingType.isEmpty()) {
                    // Update building type
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET building_type = ? WHERE project_number = ?"
                    );
                    updateStatement.setString(1, updatedBuildingType);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated project address (or press Enter to keep current): ");
                String updatedAddress = scanner.nextLine();
                if (!updatedAddress.isEmpty()) {
                    // Update project address
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET project_address = ? WHERE project_number = ?"
                    );
                    updateStatement.setString(1, updatedAddress);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated ERF number (or press Enter to keep current): ");
                int updatedErfNumber = scanner.nextInt();
                scanner.nextLine(); 
                if (updatedErfNumber > 0) {
                    // Update ERF number
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET erf_number = ? WHERE project_number = ?"
                    );
                    updateStatement.setInt(1, updatedErfNumber);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated total project fee (or press Enter to keep current): ");
                double updatedProjectFee = scanner.nextDouble();
                scanner.nextLine(); 
                if (updatedProjectFee >= 0) {
                    // Update total project fee
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET total_projectfee = ? WHERE project_number = ?"
                    );
                    updateStatement.setDouble(1, updatedProjectFee);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated total paid amount (or press Enter to keep current): ");
                double updatedTotalPaid = scanner.nextDouble();
                scanner.nextLine(); 
                if (updatedTotalPaid >= 0) {
                    // Update total paid amount
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET total_paid = ? WHERE project_number = ?"
                    );
                    updateStatement.setDouble(1, updatedTotalPaid);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Enter updated project deadline (YYYY-MM-DD) (or press Enter to keep current): ");
                String updatedDeadline = scanner.nextLine();
                if (!updatedDeadline.isEmpty()) {
                    // Update project deadline
                    PreparedStatement updateStatement = connection.prepareStatement(
                        "UPDATE Project SET project_deadline = ? WHERE project_number = ?"
                    );
                    updateStatement.setString(1, updatedDeadline);
                    updateStatement.setInt(2, projectNumber);
                    updateStatement.executeUpdate();
                }
                
                System.out.println("Project updated successfully.");
                System.out.println("");
                
             // Fetch and display the updated project details
                PreparedStatement updatedSelectStatement = connection.prepareStatement(
                    "SELECT * FROM Project WHERE project_number = ?"
                );
                updatedSelectStatement.setInt(1, projectNumber);

                ResultSet updatedResultSet = updatedSelectStatement.executeQuery();
                if (updatedResultSet.next()) {
                    System.out.println("Updated Project Details:");
                    System.out.println("Project Number: " + updatedResultSet.getInt("project_number"));
                    System.out.println("Project Name: " + updatedResultSet.getString("project_name"));
                    System.out.println("Building Type: " + updatedResultSet.getString("building_type"));
                    System.out.println("Project Address: " + updatedResultSet.getString("project_address"));
                    System.out.println("ERF Number: " + updatedResultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + updatedResultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + updatedResultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + updatedResultSet.getDate("project_deadline"));
                    System.out.println("");
                }
                
            } else {
                System.out.println("Project not found.");
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
	

	private static String getPersonName(Connection connection, String tableName, int personID) {
	    String personName = "";
	    try {
	        PreparedStatement statement = connection.prepareStatement(
	            "SELECT " + tableName.toLowerCase() + "_name FROM " + tableName + " WHERE " + tableName.toLowerCase() + "_id = ?"
	        );
	        statement.setInt(1, personID);
	
	        ResultSet resultSet = statement.executeQuery();
	        if (resultSet.next()) {
	            personName = resultSet.getString(tableName.toLowerCase() + "_name");
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return personName;
	}
}