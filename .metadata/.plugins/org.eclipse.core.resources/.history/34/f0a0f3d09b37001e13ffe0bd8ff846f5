import java.sql.*;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/PoisePMS";
        String user = "otheruser";
        String password = "swordfish";

        try {
        	// Establish database connection
            Connection connection = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to the database");

            Scanner scanner = new Scanner(System.in);
            
            AddProject addProject = new AddProject(connection);
            
            FindProject findProject = new FindProject(connection);
            findProject.searchProjects(scanner);
            
            boolean exit = false;

            while (!exit) {
                System.out.println("Select an option:");
                System.out.println("1. Add new project");
                System.out.println("2. Update/Delete project information");
                System.out.println("3. Finalise project");
                System.out.println("4. List incomplete projects");
                System.out.println("5. List overdue projects");
                System.out.println("6. Find project by number or name");
                System.out.println("7. Exit");
                int choice = scanner.nextInt();
                scanner.nextLine(); 
                 
                switch (choice) {
                    case 1:
                    	addProject.addNewProject(scanner); // Call the method
                        break;
                    case 2:
                        updateProject(connection, scanner);
                        break;
                    case 3:
                        finaliseProject(connection, scanner);
                        break;
                    case 4:
                        listIncompleteProjects(connection);
                        break;
                    case 5:
                        listOverdueProjects(connection);
                        break;
                    case 6:
                        findProjectByNameOrNumber(connection, scanner);
                        break;
                    case 7:
                        exit = true;
                        System.out.println("Program exited.");
                        break;
                    default:
                        System.out.println("Invalid choice");
                }
            }

            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    

     

    private static void listOverdueProjects(Connection connection) {
        try {
            // Prepare SQL query to retrieve overdue projects with associated names
            PreparedStatement statement = connection.prepareStatement(
                "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                "FROM Project P " +
                "JOIN Architect A ON P.architect_id = A.architect_id " +
                "JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                "JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                "JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                "WHERE P.project_deadline < CURDATE();" 
            );

            // Execute the query and get the result set
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
            	System.out.println("");
                System.out.println("Overdue projects:");
                System.out.println("-----------------");
                do {
                    // Display all project details from the result set
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("Erf Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getString("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("");
                    System.out.println("-----------------------------");
                    System.out.println("");
                } while (resultSet.next());
            } else {
                System.out.println("No overdue projects found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    private static void listIncompleteProjects(Connection connection) {
    	try {
            PreparedStatement statement = connection.prepareStatement(
                "SELECT * FROM Project " +
                "WHERE project_status <> 'finalised';"
            );

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                System.out.println("");
                System.out.println("Projects in progress:");
                System.out.println("---------------------");
                System.out.println("");

                do {
                    // Display all project details from the result set
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("Erf Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getString("project_deadline"));
                    System.out.println("Architect ID: " + resultSet.getInt("architect_id"));
                    System.out.println("Contractor ID: " + resultSet.getInt("contractor_id"));
                    System.out.println("Project Manager ID: " + resultSet.getInt("projectmanager_id"));
                    System.out.println("Structural Engineer ID: " + resultSet.getInt("structuraleng_id"));
                    System.out.println("");
                    System.out.println("-----------------------------");
                    System.out.println("");

                } while (resultSet.next());
            } else {
                System.out.println("No projects in progress found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void finaliseProject(Connection connection, Scanner scanner) {
        System.out.println("Enter project number to finalize: ");
        int projectNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        try {
            // Update project status and completion date
            PreparedStatement updateStatement = connection.prepareStatement(
                "UPDATE Project SET project_status = 'finalised', completion_date = CURDATE() WHERE project_number = ?"
            );
            updateStatement.setInt(1, projectNumber);
            int rowsUpdated = updateStatement.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Project finalised successfully.");
                System.out.println("-------------------------------");
                System.out.println("");

                // Fetch and display the finalized project details
                PreparedStatement selectStatement = connection.prepareStatement(
                    "SELECT P.*, A.architect_name, C.contractor_name, PM.manager_name, SE.structuraleng_name " +
                    "FROM Project P " +
                    "JOIN Architect A ON P.architect_id = A.architect_id " +
                    "JOIN Contractor C ON P.contractor_id = C.contractor_id " +
                    "JOIN ProjectManager PM ON P.projectmanager_id = PM.projectmanager_id " +
                    "JOIN StructuralEng SE ON P.structuraleng_id = SE.structuraleng_id " +
                    "WHERE P.project_number = ?"
                );
                selectStatement.setInt(1, projectNumber);

                ResultSet resultSet = selectStatement.executeQuery();
                if (resultSet.next()) {
                    System.out.println("Finalised Project Details:");
                    System.out.println("--------------------------");
                    System.out.println("");
                    // Print completion date
                    System.out.println("Project Completion Date: " + resultSet.getDate("completion_date"));
                    System.out.println("Project Number: " + resultSet.getInt("project_number"));
                    System.out.println("Project Name: " + resultSet.getString("project_name"));
                    System.out.println("Building Type: " + resultSet.getString("building_type"));
                    System.out.println("Project Address: " + resultSet.getString("project_address"));
                    System.out.println("ERF Number: " + resultSet.getInt("erf_number"));
                    System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
                    System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
                    System.out.println("Project Deadline: " + resultSet.getDate("project_deadline"));
                    System.out.println("Architect: " + resultSet.getString("architect_name"));
                    System.out.println("Contractor: " + resultSet.getString("contractor_name"));
                    System.out.println("Project Manager: " + resultSet.getString("manager_name"));
                    System.out.println("Structural Engineer: " + resultSet.getString("structuraleng_name"));
                    System.out.println("");
                    System.out.println("--------------------------");
                    System.out.println("");
                }
            } else {
                System.out.println("Project not found or could not be finalized.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }  
    
    private static void updateProject(Connection connection, Scanner scanner) {
        System.out.println("Enter project number to update: ");
        int projectNumber = scanner.nextInt();
        scanner.nextLine(); 
        
	        try {
	        	// Prepare a SELECT statement to retrieve project details
	            PreparedStatement selectStatement = connection.prepareStatement(
	                "SELECT * FROM Project WHERE project_number = ?"
	            );
	            selectStatement.setInt(1, projectNumber);
	
	            // Execute the SELECT statement
	            ResultSet resultSet = selectStatement.executeQuery();
	            
	            if (resultSet.next()) {
	            	// Print current project details
	                System.out.println("Current Project Details:");
	                System.out.println("Project Number: " + resultSet.getInt("project_number"));
	                System.out.println("Project Name: " + resultSet.getString("project_name"));
	                System.out.println("Building Type: " + resultSet.getString("building_type"));
	                System.out.println("Project Address: " + resultSet.getString("project_address"));
	                System.out.println("ERF Number: " + resultSet.getInt("erf_number"));
	                System.out.println("Total Project Fee: " + resultSet.getDouble("total_projectfee"));
	                System.out.println("Total Paid: " + resultSet.getDouble("total_paid"));
	                System.out.println("Project Deadline: " + resultSet.getDate("project_deadline"));
	                System.out.println("Architect: " + resultSet.getInt("architect_id"));
	                System.out.println("Contractor: " + resultSet.getInt("contractor_id"));
	                System.out.println("Project Manager: " + resultSet.getInt("projectmanager_id"));
	                System.out.println("Structural Engineer: " + resultSet.getInt("structuraleng_id"));
	                System.out.println("");
	                
	                System.out.println("Choose an option:");
	                // Print options
	                System.out.println("1. Update project name");
	                System.out.println("2. Update building type");
	                System.out.println("3. Update project address");
	                System.out.println("4. Update ERF number");
	                System.out.println("5. Update total project fee");
	                System.out.println("6. Update total paid amount");
	                System.out.println("7. Update project deadline");
	                System.out.println("8. Update Architect");
	                System.out.println("9. Update Contractor");
	                System.out.println("10. Update Project Manager");
	                System.out.println("11. Update Structural Engineer");
	                System.out.println("");              
	                System.out.println("12. Delete project name");
	                System.out.println("13. Delete building type");
	                System.out.println("14. Delete project address");
	                System.out.println("15. Delete ERF number");
	                System.out.println("16. Delete total project fee");
	                System.out.println("17. Delete total paid amount");
	                System.out.println("18. Delete project deadline");
	                System.out.println("19. Delete Architect");
	                System.out.println("20. Delete Contractor");
	                System.out.println("21. Delete Project Manager");
	                System.out.println("22. Delete Structural Engineer");
	                System.out.println("23. Delete Entire Project");
	                System.out.println("");         
	                
	                int option = scanner.nextInt();
	                scanner.nextLine();
	                
	                PreparedStatement updateStatement = null;
	                String successMessage = "Field updated/deleted successfully.";
	                
	                switch (option) {
	                    case 1:
	                    	// Update project name
	                    	System.out.println("Enter updated project name: ");
	                        String updatedName = scanner.nextLine();
	                        if (!updatedName.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET project_name = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedName);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 2:
	                        // Update building type
	                        System.out.println("Enter updated building type: ");
	                        String updatedBuildingType = scanner.nextLine();
	                        if (!updatedBuildingType.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET building_type = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedBuildingType);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 3:
	                        // Update project address
	                        System.out.println("Enter updated project address: ");
	                        String updatedAddress = scanner.nextLine();
	                        if (!updatedAddress.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET project_address = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedAddress);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 4:
	                        // Update ERF number
	                        System.out.println("Enter updated ERF number: ");
	                        int updatedErfNumber = scanner.nextInt();
	                        scanner.nextLine();
	                        if (updatedErfNumber > 0) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET erf_number = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setInt(1, updatedErfNumber);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 5:
	                        // Update total project fee
	                        System.out.println("Enter updated total project fee: ");
	                        double updatedProjectFee = scanner.nextDouble();
	                        scanner.nextLine();
	                        if (updatedProjectFee >= 0) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET total_projectfee = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setDouble(1, updatedProjectFee);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 6:
	                        // Update total paid amount
	                        System.out.println("Enter updated total paid amount: ");
	                        double updatedTotalPaid = scanner.nextDouble();
	                        scanner.nextLine();
	                        if (updatedTotalPaid >= 0) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET total_paid = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setDouble(1, updatedTotalPaid);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 7:
	                        // Update project deadline
	                        System.out.println("Enter updated project deadline (YYYY-MM-DD): ");
	                        String updatedDeadline = scanner.nextLine();
	                        if (!updatedDeadline.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET project_deadline = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedDeadline);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 8:
	                    	// Update Architect
	                        System.out.println("Enter updated Architect ID (or press Enter to keep current): ");
	                        String updatedArchitectID = scanner.nextLine();
	                        if (!updatedArchitectID.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET architect_id = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedArchitectID);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 9:
	                    	// Update Contractor
	                        System.out.println("Enter updated Contractor ID (or press Enter to keep current): ");
	                        String updatedContractorID = scanner.nextLine();
	                        if (!updatedContractorID.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET contractor_id = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedContractorID);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 10:
	                    	// Update Project Manager
	                        System.out.println("Enter updated Project Manager ID (or press Enter to keep current): ");
	                        String updatedProjectManagerID = scanner.nextLine();
	                        if (!updatedProjectManagerID.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET projectmanager_id = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedProjectManagerID);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                    case 11:
	                    	// Update Structural Engineer
	                        System.out.println("Enter updated Structural Engineer ID (or press Enter to keep current): ");
	                        String updatedStructuralEngineerID = scanner.nextLine();
	                        if (!updatedStructuralEngineerID.isEmpty()) {
	                            updateStatement = connection.prepareStatement(
	                                "UPDATE Project SET structuraleng_id = ? WHERE project_number = ?"
	                            );
	                            updateStatement.setString(1, updatedStructuralEngineerID);
	                            updateStatement.setInt(2, projectNumber);
	                            updateStatement.executeUpdate();
	                        }
	                        break;
	                        
	                    case 12:
	                        // Delete project name
	                        PreparedStatement deleteNameStatement = connection.prepareStatement(
	                            "UPDATE Project SET project_name = NULL WHERE project_number = ?"
	                        );
	                        deleteNameStatement.setInt(1, projectNumber);
	                        deleteNameStatement.executeUpdate();
	                        break;
	                    case 13:
	                        // Delete building type
	                        PreparedStatement deleteTypeStatement = connection.prepareStatement(
	                            "UPDATE Project SET building_type = NULL WHERE project_number = ?"
	                        );
	                        deleteTypeStatement.setInt(1, projectNumber);
	                        deleteTypeStatement.executeUpdate();
	                        break;
	                    case 14:
	                        // Delete project address
	                        PreparedStatement deleteAddressStatement = connection.prepareStatement(
	                            "UPDATE Project SET project_address = NULL WHERE project_number = ?"
	                        );
	                        deleteAddressStatement.setInt(1, projectNumber);
	                        deleteAddressStatement.executeUpdate();
	                        break;
	                    case 15:
	                        // Delete ERF number
	                        PreparedStatement deleteErfStatement = connection.prepareStatement(
	                            "UPDATE Project SET erf_number = NULL WHERE project_number = ?"
	                        );
	                        deleteErfStatement.setInt(1, projectNumber);
	                        deleteErfStatement.executeUpdate();
	                        break;
	                    case 16:
	                        // Delete total project fee
	                        PreparedStatement deleteFeeStatement = connection.prepareStatement(
	                            "UPDATE Project SET total_projectfee = NULL WHERE project_number = ?"
	                        );
	                        deleteFeeStatement.setInt(1, projectNumber);
	                        deleteFeeStatement.executeUpdate();
	                        break;
	                    case 17:
	                        // Delete total paid amount
	                        PreparedStatement deletePaidStatement = connection.prepareStatement(
	                            "UPDATE Project SET total_paid = NULL WHERE project_number = ?"
	                        );
	                        deletePaidStatement.setInt(1, projectNumber);
	                        deletePaidStatement.executeUpdate();
	                        break;
	                    case 18:
	                        // Delete project deadline
	                        PreparedStatement deleteDeadlineStatement = connection.prepareStatement(
	                            "UPDATE Project SET project_deadline = NULL WHERE project_number = ?"
	                        );
	                        deleteDeadlineStatement.setInt(1, projectNumber);
	                        deleteDeadlineStatement.executeUpdate();
	                        break;
	                    case 19:
	                        // Delete Architect
	                        PreparedStatement deleteArchitectStatement = connection.prepareStatement(
	                            "UPDATE Project SET architect_id = NULL WHERE project_number = ?"
	                        );
	                        deleteArchitectStatement.setInt(1, projectNumber);
	                        deleteArchitectStatement.executeUpdate();
	                        break;

	                    case 20:
	                        // Delete Contractor
	                        PreparedStatement deleteContractorStatement = connection.prepareStatement(
	                            "UPDATE Project SET contractor_id = NULL WHERE project_number = ?"
	                        );
	                        deleteContractorStatement.setInt(1, projectNumber);
	                        deleteContractorStatement.executeUpdate();
	                        break;

	                    case 21:
	                        // Delete Project Manager
	                        PreparedStatement deleteProjectManagerStatement = connection.prepareStatement(
	                            "UPDATE Project SET projectmanager_id = NULL WHERE project_number = ?"
	                        );
	                        deleteProjectManagerStatement.setInt(1, projectNumber);
	                        deleteProjectManagerStatement.executeUpdate();
	                        break;

	                    case 22:
	                        // Delete Structural Engineer
	                        PreparedStatement deleteStructuralEngineerStatement = connection.prepareStatement(
	                            "UPDATE Project SET structuraleng_id = NULL WHERE project_number = ?"
	                        );
	                        deleteStructuralEngineerStatement.setInt(1, projectNumber);
	                        deleteStructuralEngineerStatement.executeUpdate();
	                        break;
	                        
	                    case 23:
	                        // Delete entire project
	                        System.out.println("Are you sure you want to delete the entire project? (yes/no): ");
	                        String confirmation = scanner.nextLine();
	                        if (confirmation.equalsIgnoreCase("yes")) {
	                            PreparedStatement deleteProjectStatement = connection.prepareStatement(
	                                "DELETE FROM Project WHERE project_number = ?"
	                            );
	                            deleteProjectStatement.setInt(1, projectNumber);
	                            deleteProjectStatement.executeUpdate();
	                            System.out.println("Project deleted successfully.");
	                            System.out.println("");
	                        } else {
	                            System.out.println("Deletion canceled.");
	                            System.out.println("");
	                        }
	                        break;
	                        
	                    default:
	                        System.out.println("Invalid option.");
	                        break;
	                }
	                
	                if (updateStatement != null) {
	                    try {
	                        updateStatement.executeUpdate();
	                        System.out.println(successMessage);
	                        System.out.println("");
	                    } catch (SQLException e) {
	                        e.printStackTrace();
	                    }
	                }
	            } else {
	                System.out.println("Project not found.");
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	   
	private static String getPersonName(Connection connection, String tableName, int personID) {
	    String personName = "";
	    try {
	        PreparedStatement statement = connection.prepareStatement(
	            "SELECT " + tableName.toLowerCase() + "_name FROM " + tableName + " WHERE " + tableName.toLowerCase() + "_id = ?"
	        );
	        statement.setInt(1, personID);
	
	        ResultSet resultSet = statement.executeQuery();
	        if (resultSet.next()) {
	            personName = resultSet.getString(tableName.toLowerCase() + "_name");
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    return personName;
	}
}